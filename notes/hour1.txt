npm init -y to install and say yes to everything
yarn add -D @types/node typescript  <- this add typescript to the project
yarn add -D ts-node   
npx tsconfig.json  <- this gets ben's tsconfig from npm, then select nodejs for the server
create a src folder then an index.ts to align with the start script in the package.json
run yarn start to run the script
add "watch" script to the package.json. "tsc -w" runs typescript with the watch command. this compiles the code and puts it in a new dist hello. this makes typescript keep recompiling the code 
now in a new terminal run node dist/index.js to run the code
add new start script to the package.json. rename the old one to start2 
add nodemon to project. added script to package.json
add mikroORM 
yarn add @mikro-orm/cli @mikro-orm/core @mikro-orm/migrations @mikro-orm/postgresql
yarn add pg
created data base in new terminal CREATE DATABASE batut;
TIP: use control space to see options and autocomplete.
added options to the mikro init. debug shows the postgresql commands that mikroORM is running. 
create constants.ts file for things
create an entities folder. this is where the entities/dbtables will live
go to the mikroORM docs and copy the entity class based example for the Post.ts entity
set up the mikro cli to create tables. copy the package.json bit listed here https://mikro-orm.io/docs/installation/#setting-up-the-commandline-tool
create the config for mikroORM in where it lists it in the package.json. we do so we can access properties within the CLI
TIP use command period to import all missiing imports
run npx mikro-orm migration:create to create a migration. 
added types the the post entity.
I had to manually move the migrations folder out of the dis to the src folder for it to work
yarn add express apollo-server-express graphql type-graphql
yarn add -D @types/express
had to nvm install node16 then nvm use node 16 for graphql to install correctly
add resolvers folder and file for the graphql to build its schema
had to install specific version of graphql for apollo to work. version 15.3
pass in the schema to the array in the index file. 
if you want to test queries go to localhost/graphql 
yarn add reflect metadata and import it into the index file
install argon2 to hash passwords yarn add argon2
If you see a d.ts file in a packages github, you probably don't have to install the types for the npm packages

